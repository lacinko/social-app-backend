// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  @@map(name: "users")

  id String  @id @default(uuid())
  name String  
  email String @unique
  photo String? @default("default.png")
  verified Boolean? @default(false) 
  
  password String
  role RoleEnumType? @default(user)

  verificationCode String? @db.Text @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  provider String?
  passwordResetToken String? 
  passwordResetAt DateTime?

  posts Post[]
  collections CollectionAccount[]
  comments Comment[]
  likes Like[]

  @@unique([email, verificationCode, passwordResetToken])
  @@index([email, verificationCode,passwordResetToken])
}

enum RoleEnumType {
  user
  admin
}

model Post {
  @@map(name: "posts")

  id String @id @default(uuid())
  title String 
  content String 

  published Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String

  likes Like[]
  comments Comment[]
  images PostImage[]

  @@unique([title])
  @@index([title])
}

model PostImage {
  @@map(name: "postimages")

  id      String @id @default(uuid())
  url     String 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId  String
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
}

enum CollectionType {
  PUBLIC
  RESTRICTED
  PRIVATE
}

model Collection {
  @@map(name: "collections")
  
  id        String            @id @default(uuid())
  name      String            
  nsfw      Boolean
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  type      CollectionType

  members   CollectionAccount[] 
  posts     Post[]

  @@unique([name])
  @@index([name])
}

model CollectionAccount {
  @@map(name: "collectionaccounts")

  id          String          @id @default(uuid())
  role        CollectionRole
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  collection  Collection      @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  userId      String
  collectionId String

  @@unique([userId, collectionId])
  @@index([userId, collectionId])
}

enum CollectionRole {
  MEMBER
  MODERATOR
  ADMIN
}

model Comment {
  @@map("comments")

  id String @id @default(uuid())
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  parent Comment? @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String? 
  children Comment[] @relation("ParentChild")

  likes Like[]

  @@unique([id])
  @@index([id])
}

model Like{
  @@map("likes")

  id String @id @default(uuid())
  isPositive Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade )
  authorId String

  comments Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?

  posts Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  @@unique([id])
  @@index([id])
}